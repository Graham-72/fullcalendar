<?php
// $Id$

/**
 * @file
 * Provides a views style plugin for FullCalendar
 */

/**
 * Implements hook_views_api().
 */
function fullcalendar_views_api() {
  return array(
    'api' => '2',
    'path' => drupal_get_path('module', 'fullcalendar'),
  );
}

/**
 * Implements hook_init().
 */
function fullcalendar_init() {
  $path = drupal_get_path('module', 'fullcalendar');

  drupal_add_css($path . '/fullcalendar.css');
  drupal_add_js($path . '/fullcalendar.js');

  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  drupal_add_library('system', 'ui.resizable');
  drupal_add_library('system', 'effects.highlight');
}

/**
 * Implements hook_permission().
 *
 * @return array An array of valid permissions for the fullcalendar module
 */
function fullcalendar_permission() {
  return array(
    'update any fullcalendar event' => array(
      'title' => t('Update any FullCalendar event'),
      'description' => t('Allow user to edit events, ignoring other permissions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return An array of menu items.
 */
function fullcalendar_menu() {
  $items = array();

  $items['fullcalendar/ajax/update/%/%node'] = array(
    'title' => 'Update event',
    'description' => 'Save the updated event datetime.',
    'page callback' => 'fullcalendar_update',
    'page arguments' => array(3, 4),
    'access callback' => '_fullcalendar_update_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Save the updated fullcalendar event's datetime.
 *
 * @param string $action
 *   Value can be 'drop' or 'resize'.
 * @param object $node
 */
function fullcalendar_update($action, $node) {
  // Retrieve the post vars form the ajax call.
  $field = $_POST['field'];
  $index = $_POST['index'];
  $all_day = isset($_POST['all_day']) ? $_POST['all_day'] : '';
  $day_delta = $_POST['day_delta'];
  $minute_delta = $_POST['minute_delta'];

  if (!empty($field) && isset($index)) {
    $old_start = $node->{$field}[$index]['value'];
    $old_end = $node->{$field}[$index]['value2'];

    switch ($action) {
      case 'drop':
        $node->{$field}[$index]['value'] = date('Y-m-d H:i:s', strtotime($old_start . ' ' . $day_delta . ' days ' . $minute_delta . ' minutes'));
        $node->{$field}[$index]['value2'] = date('Y-m-d H:i:s', strtotime($old_end . ' ' . $day_delta . ' days ' . $minute_delta . ' minutes'));
        break;
      case 'resize':
        $node->{$field}[$index]['value2'] = date('Y-m-d H:i:s', strtotime($old_end . ' ' . $day_delta . ' days ' . $minute_delta . ' minutes'));
        break;
    }

    // Save the new start/end values.
    node_save($node);

    drupal_json_output(array('msg' => 'The new event time has been saved. [<a href="javascript:void(0);" class="fullcalendar-status-close">close</a>]'));
  }
}

//Pass through to template_preprocess_views_view_fields so that fields will be available to template file
//function template_preprocess_views_view_fields_fullcalendar(&$vars) {
//  template_preprocess_views_view_fields($vars);
//}

/**
 * Implements hook_theme().
 */
function fullcalendar_theme() {
  return array(
    'fullcalendar_classname' => array(
      'variables' => array('node' => NULL),
    ),
    'fullcalendar_link' => array(
      'variables' => array(
        'node' => NULL,
        'attributes' => NULL,
        'index' => NULL,
      ),
    ),
  );
}

/**
 * Construct CSS classes for a node.
 *
 * @param $node
 *   An object representing the node.
 *
 * @return
 *   A string suitable for use as a CSS class.
 */
function theme_fullcalendar_classname($variables) {
  $node = $variables['node'];
  $className = array(
    'fc-event-default',
    $node->type,
  );
  return implode(' ', $className);
}

/**
 * Pass settings to JavaScript.
 */
function template_preprocess_views_view_fullcalendar(&$vars) {
  $settings = array(
    'defaultView' => $vars['options']['display']['fc_view'],
    'firstDay' => $vars['options']['display']['fc_firstday'],
    'weekMode' => $vars['options']['display']['fc_weekmode'],
    'theme' => $vars['options']['modules']['fc_theme'],
    'colorbox' => $vars['options']['modules']['fc_url_colorbox'],
    'left' => $vars['options']['header']['fc_left'],
    'center' => $vars['options']['header']['fc_center'],
    'right' => $vars['options']['header']['fc_right'],
    'year' => $vars['options']['defaults']['fc_year'],
    'month' => $vars['options']['defaults']['fc_month'],
    'day' => $vars['options']['defaults']['fc_day'],
    'agenda' => $vars['options']['times']['fc_timeformat'],
    'clock' => $vars['options']['times']['fc_clock'],
  );
  drupal_add_js(array('fullcalendar' => $settings), 'setting');
  drupal_add_js(drupal_get_path('module', 'fullcalendar') . '/fullcalendar.views.js');
}

//Prepare variables for template file invoked for node row type
function template_preprocess_views_view_node_fullcalendar(&$vars) {
  $entity_type = 'node';
  if (isset($vars['view']->empty_text)) {
    $vars['empty_text'] = $vars['view']->empty_text;
    return;
  }
  $nid = $vars['row']->{$vars['field_alias']};
  if (!is_numeric($nid)) {
    return;
  }
  $node = node_load($nid);
  if (empty($node)) {
    return;
  }

  // Allow resize/drag/drop of an event if user has proper permissions.
  $node->editable = _fullcalendar_update_access($node);
  $node->class = theme('fullcalendar_classname', array('node' => $node));
  $vars['node'] = $node;
  $vars['data'] = array(); // Contains the start, end & allDay values.
  $node->url = 'node/' . $nid;
  if ($url_field = $vars['options']['fullcalendar_url_field']) {
    if ($url_field = field_get_items('node', $node, $url_field)) {
      $vars['url'] = $url_field[0]['value'];
    }
  }

  $title_field = $vars['options']['fullcalendar_title_field'];
  if (!empty($title_field) && !empty($node->{$title_field}[0]['value'])) {
    $node->title = $node->{$title_field}[0]['value'];
  }
  $display_field = fullcalendar_date_fields($node);
  $field_names = trim(strip_tags($vars['options']['fullcalendar_date_fields']));
  if (!empty($field_names)) {
    foreach (explode("\n", $field_names) as $field_name) {
      $field_name = trim(strip_tags($field_name));
      if (($field_name == 'created') || ($field_name == 'changed')) {
        $attributes = _fullcalendar_set_display_times($entity_type, $node, $field_name);
        $vars['data'][] = theme('fullcalendar_link',
          array('node' => $node, 'attributes' => $attributes, 'index' => 0)
        );
        $display_field = array();
        break;
      }
      // If a date_type field exists
      if ($display_field[$field_name]) {
        $display_field = array($field_name => $display_field[$field_name]);
        break;
      }
    }
  }
  // Iterate through available fields, using the first one found.
  foreach ($display_field as $field_name => $field) {
    $instance = field_info_instance($entity_type, $field_name, $node->type);
    foreach (field_get_items($entity_type, $node, $field_name) as $index => $item) {
      $attributes = _fullcalendar_set_display_times($entity_type, $node, $field_name, $instance, $field, $item);
      $vars['data'][] = theme('fullcalendar_link',
        array('node' => $node, 'attributes' => $attributes, 'index' => $index)
      );
    }
    break;
  }
}

/**
 * Pass times through date modules date_formatter_process function to
 * translate them to the right display times.
 *
 * @param object $node
 * @param string $field_name
 * @param integer $index
 * @param array $vars
 */
function _fullcalendar_set_display_times($entity_type, $entity, $field_name, $instance = NULL, $field = NULL, $item = NULL) {
  if (is_array($entity->$field_name)) {
    $date = date_formatter_process(NULL, $entity_type, $entity, $field, $instance, $entity->language, $item, NULL);
    $date1 = $date['value']['local']['object'];
    $date2 = $date['value2']['local']['object'];
  }
  else {
    $date1 = new DateObject($entity->$field_name, date_default_timezone(), DATE_FORMAT_UNIX);
    $date2 = $date1;
  }
  return array(
    'field' => $field_name,
    'allDay' => date_field_all_day($field, $instance, $date1, $date2),
    'start' => $date1,
    'end' => $date2,
    'nid' => $entity->nid,
    'cn' => $entity->class,
    'title' => $entity->title,
    'class' => 'fullcalendar_event_details',
    'editable' => $entity->editable,
  );
}

function theme_fullcalendar_link($variables) {
  $node = $variables['node'];
  $attributes = $variables['attributes'];
  $index = $variables['index'];
  $text = date_format_date($attributes['start']);
  if (!$attributes['allDay']) {
    $text .= ' to ' . date_format_date($attributes['end']);
  }

  $attributes['index'] = $index;
  $attributes['start'] = $attributes['start']->format(DATE_FORMAT_DATETIME);
  $attributes['end'] = $attributes['end']->format(DATE_FORMAT_DATETIME);

  return l($text, $node->url, array('attributes' => $attributes));
}

/**
 * Check if the user has access to update the given fullcalendar event.
 *
 * @param object $node
 * @return bool
 */
function _fullcalendar_update_access($node) {
  global $user;

  if (!empty($node) && (user_access('administer nodes')
      || user_access('update any fullcalendar event')
      || user_access('edit any ' . $node->type . ' content')
      || (user_access('edit own ' . $node->type . ' content') && $node->uid == $user->uid))) {
        return TRUE;
  }

  return FALSE;
}

/**
 * Find all date fields in this instance.
 *
 * Field type is not in the $field array we get from
 * field_info_instances(), we need to call
 * field_info_field() to find that.
 */
function fullcalendar_date_fields($entity, $entity_type = 'node') {
  $bundle = '';
  switch ($entity_type) {
    case 'node':
      $bundle = $entity->type;
      break;
  }
  $fields = array();
  foreach (array_keys(field_info_instances($entity_type, $bundle)) as $field_name) {
    $field = field_info_field($field_name);
    if (in_array($field['type'], array('date', 'datestamp', 'datetime'))) {
      $fields[$field_name] = $field;
    }
  }
  return $fields;
}
